We will be using Join.me to work through the lecture and labs. While the tool can be used from any web browser, to access audio and share your screen you will need to install the software on your computer and/or tablet. Go to https://join.me/ and click apps. 


https://etherpad.openstack.org/dctp1008 is where we will be sharing text snippets to work through the labs. More class information will be available there tomorrow.


Please make the class on time as we have so much material to cover. I will be available a half-hour before the class to make sure everyone gets connected and to help with logistics. 


If you haven't yet, please download putty here: 

 

http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html


Good morning. Need help setting up?


Join the online class here:


https://secure.join.me/242-525-661


or enter 262-525-661 in Join.me software.


If you'd like a phone number to call in, dial: Conference number:

+1.513.386.0101

Conference ID:

242-525-661


---------------------------------------------------------------


sudo apt-get -y install curl ntp

sudo ntpdate -u 129.6.15.30 

sudo su

# Set hostname

sudo hostname controller

sudo echo controller > /etc/hostname

# Replace 'ubuntu' below with existing host name

sudo sed -i 's/ubuntu/controller/g' /etc/hosts

sudo shutdown -r now


.... after reboot:


sudo su

# Enable the Cloud Archive repository

cat >> /etc/apt/sources.list.d/grizzly.list <<EOF

deb http://ubuntu-cloud.archive.canonical.com/ubuntu precise-updates/grizzly main

EOF


sudo apt-get install ubuntu-cloud-keyring

# Update all

sudo apt-get update -y && apt-get upgrade -y


####################################################################################

#    MySQL and RabbitMQ

####################################################################################

# Preseed the MySQL install

cat <<EOF | sudo debconf-set-selections

mysql-server-5.1 mysql-server/root_password password mysqlpw

mysql-server-5.1 mysql-server/root_password_again password mysqlpw

mysql-server-5.1 mysql-server/start_on_boot boolean true

EOF


exit

# Install packages and dependencies

sudo apt-get install -y rabbitmq-server mysql-server python-mysqldb

# Configure MySQL to listen on all interfaces

sudo sed -i 's/127.0.0.1/0.0.0.0/g' /etc/mysql/my.cnf

sudo service mysql restart

exit

####################################################################################

####################################################################################

#    Identity Service (Keystone)

####################################################################################

####################################################################################

# Install Keystone

sudo apt-get install -y keystone

# Delete the keystone.db file created in the /var/lib/keystone directory.

sudo rm /var/lib/keystone/keystone.db

# Verify the OpenStack version (Grizzly == 2013.1)

sudo dpkg -p keystone | grep "Version:"



# Create a database for keystone

sudo mysql -u root -pmysqlpw -e "CREATE DATABASE keystone;"

sudo mysql -u root -pmysqlpw -e "GRANT ALL ON keystone.* TO 'keystone'@'localhost' IDENTIFIED BY 'keystonepw';"

sudo mysql -u root -pmysqlpw -e "GRANT ALL ON keystone.* TO 'keystone'@'$PRIVATE_IP' IDENTIFIED BY 'keystonepw';"

sudo mysql -u root -pmysqlpw -e "GRANT ALL ON keystone.* TO 'keystone'@'%' IDENTIFIED BY 'keystonepw';"


sudo sed -i "s|connection = sqlite:////var/lib/keystone/keystone.db|connection = mysql://keystone:keystonepw@$PRIVATE_IP/keystone|g" /etc/keystone/keystone.conf


# Change default admin_token

sudo sed -i "s|# admin_token = ADMIN|admin_token = ADMINSERVICETOKEN|g" /etc/keystone/keystone.conf



# Create encryption certificate to use ssl with other services

sudo keystone-manage pki_setup

sudo chown -R keystone:keystone /etc/keystone/*


labuser@controller:~$ sudo su

root@controller:/home/labuser# chown -R keystone:keystone /etc/keystone/*

root@controller:/home/labuser# exit



sudo service keystone restart


sudo pgrep -l keystone


sudo -u keystone keystone-manage db_sync



export SERVICE_TOKEN=ADMINSERVICETOKEN

export SERVICE_ENDPOINT=http://$PRIVATE_IP:35357/v2.0



TENANT_ID=`keystone tenant-create --name LabTenant | awk '/ id / { print $4 }'`


SERVICE_TENANT_ID=`keystone tenant-create --name Services | awk '/ id / { print $4 }'`


keystone tenant-list



ADMIN_ROLE_ID=`keystone role-create --name admin | awk '/ id / { print $4 }'`



MEMBER_USER_ID=`keystone user-create --tenant-id $TENANT_ID --name labuser --pass labuserpw | awk '/ id / { print $4 }'`

ADMIN_USER_ID=`keystone user-create --tenant-id $TENANT_ID --name labadmin --pass labadminpw | awk '/ id / { print $4 }'`



keystone user-role-add --user-id $ADMIN_USER_ID --tenant-id $TENANT_ID --role-id $ADMIN_ROLE_ID


keystone user-list


keystone tenant-list

keystone role-list

keystone user-list --tenant-id $TENANT_ID

keystone user-role-list --tenant-id $TENANT_ID --user-id $MEMBER_USER_ID

keystone user-role-list --tenant-id $TENANT_ID --user-id $ADMIN_USER_ID


# Populate the services in the service catalog

KEYSTONE_SVC_ID=`keystone service-create --name=keystone --type=identity --description="Keystone Identity Service" | awk '/ id / { print $4 }'`

GLANCE_SVC_ID=`keystone service-create --name=glance --type=image --description="Glance Image Service" | awk '/ id / { print $4 }'`

QUANTUM_SVC_ID=`keystone service-create --name=quantum --type=network --description="Quantum Network Service" | awk '/ id / { print $4 }'`

NOVA_SVC_ID=`keystone service-create --name=nova --type=compute --description="Nova Compute Service" | awk '/ id / { print $4 }'`

CINDER_SVC_ID=`keystone service-create --name=cinder --type=volume --description="Cinder Volume Service" | awk '/ id / { print $4 }'`

# List the new services

keystone service-list


# Populate the endpoints in the service catalog

keystone endpoint-create --region RegionOne --service-id=$KEYSTONE_SVC_ID --publicurl=http://$PRIVATE_IP:5000/v2.0 --internalurl=http://$PRIVATE_IP:5000/v2.0 --adminurl=http://$PRIVATE_IP:35357/v2.0

keystone endpoint-create --region RegionOne --service-id=$GLANCE_SVC_ID --publicurl=http://$PRIVATE_IP:9292/v1 --internalurl=http://$PRIVATE_IP:9292/v1 --adminurl=http://$PRIVATE_IP:9292/v1

keystone endpoint-create --region RegionOne --service-id=$QUANTUM_SVC_ID --publicurl=http://$PRIVATE_IP:9696/ --internalurl=http://$PRIVATE_IP:9696/ --adminurl=http://$PRIVATE_IP:9696/

keystone endpoint-create --region RegionOne --service-id=$NOVA_SVC_ID --publicurl="http://$PRIVATE_IP:8774/v2/%(tenant_id)s" --internalurl="http://$PRIVATE_IP:8774/v2/%(tenant_id)s" --adminurl="http://$PRIVATE_IP:8774/v2/%(tenant_id)s"

keystone endpoint-create --region RegionOne --service-id=$CINDER_SVC_ID --publicurl="http://$PRIVATE_IP:8776/v1/%(tenant_id)s" --internalurl="http://$PRIVATE_IP:8776/v1/%(tenant_id)s" --adminurl="http://$PRIVATE_IP:8776/v1/%(tenant_id)s"



keystone endpoint-list

unset SERVICE_TOKEN

unset SERVICE_ENDPOINT


curl -d '{"auth": {"tenantName": "LabTenant", "passwordCredentials": {"username": "labuser", "password": "labuserpw"}}}' -H "Content-type: application/json" http://$PRIVATE_IP:5000/v2.0/tokens | python -m json.tool

curl -d '{"auth": {"tenantName": "LabTenant", "passwordCredentials": {"username": "labadmin", "password": "labadminpw"}}}' -H "Content-type: application/json" http://$PRIVATE_IP:5000/v2.0/tokens | python -m json.tool



mkdir ~/credentials


cat >> ~/credentials/user <<EOF

export OS_USERNAME=labuser

export OS_PASSWORD=labuserpw

export OS_TENANT_NAME=LabTenant

export OS_AUTH_URL=http://$PRIVATE_IP:5000/v2.0/

export OS_REGION_NAME=RegionOne

export OS_NO_CACHE=1

EOF



cat >> ~/credentials/admin <<EOF

export OS_USERNAME=labadmin

export OS_PASSWORD=labadminpw

export OS_TENANT_NAME=LabTenant

export OS_AUTH_URL=http://$PRIVATE_IP:5000/v2.0/

export OS_REGION_NAME=RegionOne

export OS_NO_CACHE=1


EOF


source ~/credentials/admin


cat >> ~/.bashrc <<EOF

export SERVICE_TENANT_ID=$SERVICE_TENANT_ID

export ADMIN_ROLE_ID=$ADMIN_ROLE_ID

EOF


sudo apt-get install -y glance



sudo rm /var/lib/glance/glance.sqlite


source ~/credentials/admin

GLANCE_USER_ID=`keystone user-create --tenant-id $SERVICE_TENANT_ID --name glance --pass glancepw | awk '/ id / { print $4 }'`


keystone user-role-add --user-id $GLANCE_USER_ID --tenant-id $SERVICE_TENANT_ID --role-id $ADMIN_ROLE_ID


keystone user-list --tenant-id $SERVICE_TENANT_ID

keystone user-role-list --tenant-id $SERVICE_TENANT_ID --user-id $GLANCE_USER_ID



# Create a database for glance

mysql -u root -pmysqlpw -e "CREATE DATABASE glance;"

mysql -u root -pmysqlpw -e "GRANT ALL ON glance.* TO 'glance'@'localhost' IDENTIFIED BY 'glancepw';"

mysql -u root -pmysqlpw -e "GRANT ALL ON glance.* TO 'glance'@'$PRIVATE_IP' IDENTIFIED BY 'glancepw';"

mysql -u root -pmysqlpw -e "GRANT ALL ON glance.* TO 'glance'@'%' IDENTIFIED BY 'glancepw';"


# Configure the glance-api service

sudo sed -i "s|sql_connection = sqlite:////var/lib/glance/glance.sqlite|sql_connection = mysql://glance:glancepw@$PRIVATE_IP/glance|g" /etc/glance/glance-api.conf

sudo sed -i "s/auth_host = 127.0.0.1/auth_host = $PRIVATE_IP/g" /etc/glance/glance-api.conf

sudo sed -i 's/%SERVICE_TENANT_NAME%/Services/g' /etc/glance/glance-api.conf

sudo sed -i 's/%SERVICE_USER%/glance/g' /etc/glance/glance-api.conf

sudo sed -i 's/%SERVICE_PASSWORD%/glancepw/g' /etc/glance/glance-api.conf

sudo sed -i 's/#flavor=/flavor = keystone/g' /etc/glance/glance-api.conf


# Configure the glance-registry service

sudo sed -i "s|sql_connection = sqlite:////var/lib/glance/glance.sqlite|sql_connection = mysql://glance:glancepw@$PRIVATE_IP/glance|g" /etc/glance/glance-registry.conf

sudo sed -i "s/auth_host = 127.0.0.1/auth_host = $PRIVATE_IP/g" /etc/glance/glance-registry.conf

sudo sed -i 's/%SERVICE_TENANT_NAME%/Services/g' /etc/glance/glance-registry.conf

sudo sed -i 's/%SERVICE_USER%/glance/g' /etc/glance/glance-registry.conf

sudo sed -i 's/%SERVICE_PASSWORD%/glancepw/g' /etc/glance/glance-registry.conf

sudo sed -i 's/#flavor=/flavor = keystone/g' /etc/glance/glance-registry.conf


sudo service glance-registry restart

sudo service glance-api restart


pgrep -l glance



sudo -u glance glance-manage db_sync

mkdir ~/images


wget https://launchpad.net/cirros/trunk/0.3.0/+download/cirros-0.3.0-x86_64-uec.tar.gz -qO- | tar zxC ~/images

wget https://launchpad.net/cirros/trunk/0.3.0/+download/cirros-0.3.0-x86_64-disk.img -O ~/images/cirros-0.3.1~pre4-x86_64-disk.img




DO NOT DOWNLOAD THESE BECAUSE THEY WILL TAKE FOREVER!


#Optional Ubuntu Image

wget http://cloud-images.ubuntu.com/precise/current/precise-server-cloudimg-amd64-disk1.img -O ~/images/precise.qcow2.img

#Optional Windows Image

wget http://192.237.168.211/images/windows_server_2012_standard_eval_kvm_20130510.qcow2.gz  -O ~/images/windows_server_2012_standard_eval_kvm_20130510.qcow2.gz



---------------------------------------------------------



source ~/credentials/user




# Register a three part image (amazon style, separate kernal and ramdisk)

KERNEL_ID=`glance image-create --name "cirros-threepart-kernel" --disk-format aki --container-format aki --is-public True --file ~/images/cirros-0.3.0-x86_64-vmlinuz | awk '/ id / { print $4 }'`

RAMDISK_ID=`glance image-create --name "cirros-threepart-ramdisk" --disk-format ari --container-format ari --is-public True --file ~/images/cirros-0.3.0-x86_64-initrd | awk '/ id / { print $4 }'`

IMAGE_ID_1=`glance image-create --name "cirros-threepart" --disk-format ami --container-format ami --is-public True --property kernel_id=$KERNEL_ID --property ramdisk_id=$RAMDISK_ID --file ~/images/cirros-0.3.0-x86_64-blank.img | awk '/ id / { print $4 }'`


# Register a qcow2 image

IMAGE_ID_2=`glance image-create --name "cirros-qcow2" --disk-format qcow2 --container-format bare --is-public True --file ~/images/cirros-0.3.1~pre4-x86_64-disk.img | awk '/ id / { print $4 }'`


DO NOT DO THIS:


# Optional Ubuntu

UBUNTU_ID=`glance image-create --name "precise-qcow2" --disk-format qcow2 --container-format bare --is-public True --file ~/images/precise.qcow2.img | awk '/ id / { print $4 }'`

# Optional Windows

WIN_IMAGE_ID=`gunzip -cd windows_server_2012_standard_eval_kvm_20130510.qcow2.gz | glance image-create --name "Windwos Server 2012 Std eval" --disk-format qcow2 --container-format bare --is-public True | awk '/ id / { print $4 }'`


----------------------------------------------------------------------------------------------------------------------------------------


glance image-list


# Examine details of images

glance image-show $IMAGE_ID_1

glance image-show $IMAGE_ID_2


cat >> ~/.bashrc <<EOF

export IMAGE_ID_1=$IMAGE_ID_1

export IMAGE_ID_2=$IMAGE_ID_2

export UBUNTU_ID=$UBUNTU_ID

export WINIMAGE_ID=$WINIMAGE_ID

EOF





####################################################################################

####################################################################################

#    Networking service (Neutron[Quantum])

####################################################################################

####################################################################################


# Install dependencies

sudo apt-get install -y openvswitch-switch

# Install the network service (quantum)

sudo apt-get install -y quantum-server quantum-plugin-openvswitch

# Install the network service (quantum) agents

sudo apt-get install -y quantum-plugin-openvswitch-agent quantum-dhcp-agent quantum-l3-agent


# Create a database for quantum

mysql -u root -pmysqlpw -e "CREATE DATABASE quantum;"

mysql -u root -pmysqlpw -e "GRANT ALL ON quantum.* TO 'quantum'@'localhost' IDENTIFIED BY 'quantumpw';"

mysql -u root -pmysqlpw -e "GRANT ALL ON quantum.* TO 'quantum'@'$PRIVATE_IP' IDENTIFIED BY 'quantumpw';"

mysql -u root -pmysqlpw -e "GRANT ALL ON quantum.* TO 'quantum'@'%' IDENTIFIED BY 'quantumpw';"



# Configure the quantum OVS plugin

sudo sed -i "s|sql_connection = sqlite:////var/lib/quantum/ovs.sqlite|sql_connection = mysql://quantum:quantumpw@$PRIVATE_IP/quantum|g"  /etc/quantum/plugins/openvswitch/ovs_quantum_plugin.ini

sudo sed -i 's/# Default: enable_tunneling = False/enable_tunneling = True/g' /etc/quantum/plugins/openvswitch/ovs_quantum_plugin.ini

sudo sed -i 's/# Example: tenant_network_type = gre/tenant_network_type = gre/g' /etc/quantum/plugins/openvswitch/ovs_quantum_plugin.ini

sudo sed -i 's/# Example: tunnel_id_ranges = 1:1000/tunnel_id_ranges = 1:1000/g' /etc/quantum/plugins/openvswitch/ovs_quantum_plugin.ini

sudo sed -i "s/# Default: local_ip =/local_ip = $PUBLIC_IP/g" /etc/quantum/plugins/openvswitch/ovs_quantum_plugin.ini

sudo sed -i "s/# firewall_driver/firewall_driver/g" /etc/quantum/plugins/openvswitch/ovs_quantum_plugin.ini


source ~/credentials/admin


# Create quantum service user in the services tenant

QUANTUM_USER_ID=`keystone user-create --tenant-id $SERVICE_TENANT_ID --name quantum --pass quantumpw | awk '/ id / { print $4 }'`

# Grant admin role to quantum service user

keystone user-role-add --user-id $QUANTUM_USER_ID --tenant-id $SERVICE_TENANT_ID --role-id $ADMIN_ROLE_ID


# List the new user and role assigment

keystone user-list --tenant-id $SERVICE_TENANT_ID

keystone user-role-list --tenant-id $SERVICE_TENANT_ID --user-id $QUANTUM_USER_ID



# Configure the quantum service to use keystone

sudo sed -i 's/# auth_strategy = keystone/auth_strategy = keystone/g' /etc/quantum/quantum.conf

sudo sed -i "s/auth_host = 127.0.0.1/auth_host = $PRIVATE_IP/g" /etc/quantum/quantum.conf

sudo sed -i 's/%SERVICE_TENANT_NAME%/Services/g' /etc/quantum/quantum.conf

sudo sed -i 's/%SERVICE_USER%/quantum/g' /etc/quantum/quantum.conf

sudo sed -i 's/%SERVICE_PASSWORD%/quantumpw/g' /etc/quantum/quantum.conf


sudo service openvswitch-switch restart


# Create the integration and external bridges

sudo ovs-vsctl add-br br-int

sudo ovs-vsctl add-br br-ex


# Restart the quantum services

sudo service quantum-server restart

sudo service quantum-plugin-openvswitch-agent restart

sudo service quantum-dhcp-agent restart

sudo service quantum-l3-agent restart


source ~/credentials/user


PRIVATE_NET_ID=`quantum net-create private | awk '/ id / { print $4 }'`


quantum net-list


PRIVATE_SUBNET1_ID=`quantum subnet-create --name private-subnet1 $PRIVATE_NET_ID 10.208.128.0/29 | awk '/ id / { print $4 }'`

quantum subnet-list


# Examine details of network and subnet

quantum net-show $PRIVATE_NET_ID

quantum subnet-show $PRIVATE_SUBNET1_ID



cat >> ~/.bashrc <<EOF

export PRIVATE_NET_ID=$PRIVATE_NET_ID

export PRIVATE_SUBNET1_ID=$PRIVATE_SUBNET1_ID

EOF



egrep -c '(vmx|svm)' /proc/cpuinfo



Not required

VVVVVVVVV

Either nova-compute-kvm for cpu virtualization support


OR nova-compute-qemu for emulation


We are using qemu

^^^^^^^^^^^^^^


####################################################################################

####################################################################################

#    Compute Service (Nova)

####################################################################################

####################################################################################


sudo apt-get install -y nova-api nova-scheduler nova-conductor nova-compute-qemu nova-cert nova-consoleauth genisoimage


source ~/credentials/admin



NOVA_USER_ID=`keystone user-create --tenant-id $SERVICE_TENANT_ID --name nova --pass novapw | awk '/ id / { print $4 }'`



keystone user-role-add --user-id $NOVA_USER_ID --tenant-id $SERVICE_TENANT_ID --role-id $ADMIN_ROLE_ID




# List the new user and role assigment

keystone user-list --tenant-id $SERVICE_TENANT_ID

keystone user-role-list --tenant-id $SERVICE_TENANT_ID --user-id $NOVA_USER_ID




# Create a database for nova

mysql -u root -pmysqlpw -e "CREATE DATABASE nova;"

mysql -u root -pmysqlpw -e "GRANT ALL ON nova.* TO 'nova'@'localhost' IDENTIFIED BY 'novapw';"

mysql -u root -pmysqlpw -e "GRANT ALL ON nova.* TO 'nova'@'$PRIVATE_IP' IDENTIFIED BY 'novapw';"

mysql -u root -pmysqlpw -e "GRANT ALL ON nova.* TO 'nova'@'%' IDENTIFIED BY 'novapw';"



# Configure nova

cat <<EOF | sudo tee -a /etc/nova/nova.conf

compute_driver=libvirt.LibvirtDriver

libvirt_type=qemu

libvirt_use_virtio_for_bridges=True

network_api_class=nova.network.quantumv2.api.API

quantum_url=http://$PRIVATE_IP:9696

quantum_auth_strategy=keystone

quantum_admin_tenant_name=Services

quantum_admin_username=quantum

quantum_admin_password=quantumpw

quantum_admin_auth_url=http://$PRIVATE_IP:35357/v2.0

firewall_driver=nova.virt.firewall.NoopFirewallDriver

security_group_api=quantum

sql_connection=mysql://nova:novapw@$PRIVATE_IP/nova

auth_strategy=keystone

force_config_drive=True

my_ip=$PRIVATE_IP

EOF


# Disable verbose logging

sudo sed -i 's/verbose=True/verbose=False/g' /etc/nova/nova.conf


# Configure nova to use keystone

sudo sed -i "s/auth_host = 127.0.0.1/auth_host = $PRIVATE_IP/g" /etc/nova/api-paste.ini

sudo sed -i 's/%SERVICE_TENANT_NAME%/Services/g' /etc/nova/api-paste.ini

sudo sed -i 's/%SERVICE_USER%/nova/g' /etc/nova/api-paste.ini

sudo sed -i 's/%SERVICE_PASSWORD%/novapw/g' /etc/nova/api-paste.ini


sudo -u nova nova-manage db sync


# Restart nova services

sudo service nova-api restart

sudo service nova-scheduler restart

sudo service nova-conductor restart

sudo service nova-compute restart

sudo service nova-cert restart

sudo service nova-consoleauth restart


# Restart the quantum services

sudo service quantum-server restart

sudo service quantum-plugin-openvswitch-agent restart

sudo service quantum-dhcp-agent restart

sudo service quantum-l3-agent restart


pgrep -l nova


sudo nova-manage service list


source ~/credentials/user


# List images

nova image-list

# List flavors

nova flavor-list



nova boot --image cirros-qcow2 --flavor m1.tiny LabFirstInstance

nova boot --image $IMAGE_ID_2 --flavor 1 LabSecondInstance


nova list

nova show LabFirstInstance

nova console-log LabFirstInstance


sudo ip netns

NETNS_ID=qdhcp-$PRIVATE_NET_ID


sudo ip netns exec $NETNS_ID ping -c 3 10.208.128.3


sudo ip netns exec $NETNS_ID ssh cirros@10.208.128.3


ping -c 3 10.208.128.4


ssh cirros@10.208.128.4


sudo virsh list --all


nova delete LabFirstInstance

nova delete LabSecondInstance



nova list


cat >> ~/.bashrc <<EOF

export NETNS_ID=$NETNS_ID

EOF


####################################################################################

####################################################################################

#    Volume Service (Cinder)

####################################################################################

####################################################################################


sudo apt-get install -y cinder-api cinder-scheduler cinder-volume


source ~/credentials/admin



# Create cinder service user in the services tenant

CINDER_USER_ID=`keystone user-create --tenant-id $SERVICE_TENANT_ID --name cinder --pass cinderpw | awk '/ id / { print $4 }'`

# Grant admin role to cinder service user

keystone user-role-add --user-id $CINDER_USER_ID --tenant-id $SERVICE_TENANT_ID --role-id $ADMIN_ROLE_ID

# List the new user and role assigment

keystone user-list --tenant-id $SERVICE_TENANT_ID

keystone user-role-list --tenant-id $SERVICE_TENANT_ID --user-id $CINDER_USER_ID




# Create a database for cinder

mysql -u root -pmysqlpw -e "CREATE DATABASE cinder;"

mysql -u root -pmysqlpw -e "GRANT ALL ON cinder.* TO 'cinder'@'localhost' IDENTIFIED BY 'cinderpw';"

mysql -u root -pmysqlpw -e "GRANT ALL ON cinder.* TO 'cinder'@'$PRIVATE_IP' IDENTIFIED BY 'cinderpw';"

mysql -u root -pmysqlpw -e "GRANT ALL ON cinder.* TO 'cinder'@'%' IDENTIFIED BY 'cinderpw';"


# Configure cinder

( cat | sudo tee -a /etc/cinder/cinder.conf ) <<EOF

sql_connection = mysql://cinder:cinderpw@$PRIVATE_IP/cinder

my_ip = $PRIVATE_IP

EOF


# Configure cinder-api to use keystone

sudo sed -i "s/service_host = 127.0.0.1/service_host = $PRIVATE_IP/g" /etc/cinder/api-paste.ini

sudo sed -i "s/auth_host = 127.0.0.1/auth_host = $PRIVATE_IP/g" /etc/cinder/api-paste.ini

sudo sed -i 's/admin_tenant_name = %SERVICE_TENANT_NAME%/admin_tenant_name = Services/g' /etc/cinder/api-paste.ini

sudo sed -i 's/admin_user = %SERVICE_USER%/admin_user = cinder/g' /etc/cinder/api-paste.ini

sudo sed -i 's/admin_password = %SERVICE_PASSWORD%/admin_password = cinderpw/g' /etc/cinder/api-paste.ini


sudo -u cinder cinder-manage db sync


# Configure nova to use cinder

( cat | sudo tee -a /etc/nova/nova.conf ) <<EOF

volume_manager=cinder.volume.manager.VolumeManager

volume_api_class=nova.volume.cinder.API

enabled_apis=osapi_compute

EOF



# Restart nova-api to disable the nova-volume api (osapi_volume)

sudo service nova-api restart

sudo service nova-scheduler restart

sudo service nova-conductor restart

sudo service nova-compute restart

sudo service nova-cert restart

sudo service nova-consoleauth restart

# Restart the quantum services

sudo service quantum-server restart

sudo service quantum-plugin-openvswitch-agent restart

sudo service quantum-dhcp-agent restart

sudo service quantum-l3-agent restart


# Configure tgt

( cat | sudo tee -a /etc/tgt/targets.conf ) <<EOF

default-driver iscsi

EOF



# Restart tgt and open-iscsi

sudo service tgt restart

sudo service open-iscsi restart


sudo pvcreate /dev/xvda2


sudo vgcreate cinder-volumes /dev/xvda2


sudo vgdisplay

sudo service cinder-volume restart

sudo service cinder-scheduler restart

sudo service cinder-api restart


# Use the 'user' credentials

source ~/credentials/user

# Create a new volume

cinder create 1 --display-name LabFirstVolume

# Boot an instance to attach volume to

nova boot --image cirros-qcow2 --flavor m1.tiny LabVolumeInstance

# List instances, notice status of instance

nova list

# List volumes, notice status of volume

cinder list


nova volume-attach <instance-id> <volume-id> /dev/vdc


sudo ssh-keygen -f "/root/.ssh/known_hosts"

sudo ip netns exec $NETNS_ID ssh cirros@10.208.128.3



nova volume-detach <instance-id> <volume-id>

nova volume-attach <instance-id> <volume-id> /dev/vdc

sudo mkfs.ext3 /dev/vdc


sudo mkdir /extraspace

sudo mount /dev/vdc /extraspace



sudo touch /extraspace/helloworld.txt

sudo ls /extraspace


sudo umount /extraspace


exit


nova volume-detach <instance-id> <volume-id>


cinder list



nova delete LabVolumeInstance



####################################################################################

####################################################################################

#    Dashboard (Horizon)

####################################################################################

####################################################################################


sudo apt-get install -y memcached novnc


sudo apt-get install -y openstack-dashboard nova-novncproxy


sudo apt-get remove -y --purge openstack-dashboard-ubuntu-theme


# Configure nova for VNC

( cat | sudo tee -a /etc/nova/nova.conf ) <<EOF

novncproxy_base_url=http://$PUBLIC_IP:6080/vnc_auto.html

vncserver_proxyclient_address=$PRIVATE_IP

vncserver_listen=0.0.0.0

novnc_enable=true

EOF


# Set default role

sudo sed -i 's/OPENSTACK_KEYSTONE_DEFAULT_ROLE = "Member"/OPENSTACK_KEYSTONE_DEFAULT_ROLE = "_member_"/g' /etc/openstack-dashboard/local_settings.py

# Restart the nova services

sudo service nova-api restart

sudo service nova-scheduler restart

sudo service nova-conductor restart

sudo service nova-compute restart

sudo service nova-cert restart

sudo service nova-consoleauth restart

sudo service apache2 restart


# Point your browser to http://<IP_ADDRESS>/horizon


labadmin / labadminpw


