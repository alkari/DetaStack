# Install OpenStack Grizzly on Ubuntu 12.04 LTS
#
# Compute Node setup steps on a Cloud based VM with:
# 4GB RAM, 2CPU
# eth0 - Public Interface [192.237.167.197]
# eth1 - Private Interface [10.208.148.93]
# /dev/xvda [150GB]
# /dev/xvdb [100GB]
#
# bugtrack al.kari@detacloud.com || @detacloud
# 2013-10-10

# Check if nested virtualization is supported. Use qemu if not.
apt-get install -y cpu-checker
kvm-ok

egrep -c '(vmx|svm)' /proc/cpuinfo

# use qemu if 0, else use kvm
# nova-compute-kvm requires that your CPU supports hardware-assisted virtualization (HVM) such as Intel VT-x or AMD-V. If your CPU does not support this, or if you are already running in a virtualized environment, you can instead use the nova-compute-qemu package. This package provides software-based virtualization.


# Replace the following credentials for production install:

# quantumpw
# novapw
# LabTenant
# labuser / labuserpw
# labadmin / labadminpw

# login
sudo su

# Install supporting packages
sudo apt-get -y install curl ntp

# Add a user
adduser labuser
# Enter: labuserpw
apt-get install sudo -y
echo "labuser ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

# Configure networking

sudo sed -i "s/#net.ipv4.conf.default.rp_filter=1/net.ipv4.conf.default.rp_filter=0/g" /etc/sysctl.conf
sudo sed -i "s/#net.ipv4.conf.all.rp_filter=1/net.ipv4.conf.all.rp_filter=0/g" /etc/sysctl.conf

sudo sysctl -p
sudo service networking restart

# Store Controller IP address
CONT_PRIVATE_IP=10.208.24.74
CONT_PUBLIC_IP=192.237.245.109


# 4 - Synchronize time with Controller
sudo ntpdate -u $CONT_PRIVATE_IP 
sudo -- sh -c "echo 'server $CONT_PRIVATE_IP' >> /etc/ntp.conf"
sudo service ntp restart

# Set name resolution
sudo -- sh -c "echo $PUBLIC_IP nova1 > /etc/hosts"
sudo -- sh -c "echo $PRIVATE_IP nova1 >> /etc/hosts"
sudo -- sh -c "echo $CONT_PRIVATE_IP controller >> /etc/hosts"


# Set hostname
sudo hostname nova1
sudo -- sh -c "echo nova1 > /etc/hostname"


# IMPORTANT: Reboot after changing host name
sudo shutdown -r now


# LOGIN WITH NEW USER: labuser/labuserpw

# Store Controller IP address
CONT_PRIVATE_IP=10.208.24.74
CONT_PUBLIC_IP=192.237.245.109

# Create the 'user' and 'admin' credentials
mkdir ~/credentials

cat >> ~/credentials/user <<EOF
export OS_USERNAME=labuser
export OS_PASSWORD=labuserpw
export OS_TENANT_NAME=LabTenant
export OS_AUTH_URL=http://$CONT_PRIVATE_IP:5000/v2.0/
export OS_REGION_NAME=RegionOne
export OS_NO_CACHE=1
EOF

cat >> ~/credentials/admin <<EOF
export OS_USERNAME=labadmin
export OS_PASSWORD=labadminpw
export OS_TENANT_NAME=LabTenant
export OS_AUTH_URL=http://$CONT_PRIVATE_IP:5000/v2.0/
export OS_REGION_NAME=RegionOne
export OS_NO_CACHE=1
EOF


# Enable the Cloud Archive repository
sudo -- sh -c " cat >> /etc/apt/sources.list.d/grizzly.list <<EOF
deb http://ubuntu-cloud.archive.canonical.com/ubuntu precise-updates/grizzly main
EOF"

sudo apt-get install ubuntu-cloud-keyring

# Update all
sudo -- sh -c "apt-get update -y && apt-get upgrade -y"


####################################################################################
####################################################################################
#				Compute Service (Nova)
####################################################################################
####################################################################################


# Install the compute service (nova)
sudo apt-get install -y nova-compute-qemu genisoimage

# Configure nova
cat <<EOF | sudo tee -a /etc/nova/nova.conf
compute_driver=libvirt.LibvirtDriver
libvirt_type=qemu
rabbit_host=$CONT_PRIVATE_IP
libvirt_use_virtio_for_bridges=True
network_api_class=nova.network.quantumv2.api.API
quantum_url=http://$CONT_PRIVATE_IP:9696
quantum_auth_strategy=keystone
quantum_admin_tenant_name=Services
quantum_admin_username=quantum
quantum_admin_password=quantumpw
quantum_admin_auth_url=http://$CONT_PRIVATE_IP:35357/v2.0
firewall_driver=nova.virt.firewall.NoopFirewallDriver
security_group_api=quantum
sql_connection=mysql://nova:novapw@$CONT_PRIVATE_IP/nova
auth_strategy=keystone
force_config_drive=True
volume_api_class=nova.volume.cinder.API
glance_api_servers=$CONT_PRIVATE_IP:9292
image_service=nova.image.glance.GlanceImageService
my_ip=$PRIVATE_IP
EOF

# Disable verbose logging
sudo sed -i 's/verbose=True/verbose=False/g' /etc/nova/nova.conf

# Configure nova to use keystone
sudo sed -i "s/auth_host = 127.0.0.1/auth_host = $CONT_PRIVATE_IP/g" /etc/nova/api-paste.ini
sudo sed -i 's/%SERVICE_TENANT_NAME%/Services/g' /etc/nova/api-paste.ini
sudo sed -i 's/%SERVICE_USER%/nova/g' /etc/nova/api-paste.ini
sudo sed -i 's/%SERVICE_PASSWORD%/novapw/g' /etc/nova/api-paste.ini

# Configure nova for VNC
( cat | sudo tee -a /etc/nova/nova.conf ) <<EOF
novncproxy_base_url=http://$CONT_PUBLIC_IP:6080/vnc_auto.html
vncserver_proxyclient_address=$PRIVATE_IP
vncserver_listen=0.0.0.0
novnc_enable=true
EOF


# Restart nova services
sudo service nova-compute restart

sudo nova-manage db sync

# Verify nova services successfully restarted
pgrep -l nova

# Verify nova services are functioning and checking in :-)
sudo nova-manage service list







####################################################################################
####################################################################################
#				Networking service (Neutron[Quantum])
####################################################################################
####################################################################################


# Install dependencies
sudo apt-get install -y openvswitch-switch


# Install the network service (quantum) agent
sudo apt-get install -y quantum-plugin-openvswitch-agent

# Configure the quantum OVS plugin
sudo sed -i "s|sql_connection = sqlite:////var/lib/quantum/ovs.sqlite|sql_connection = mysql://quantum:quantumpw@$CONT_PRIVATE_IP/quantum|g"  /etc/quantum/plugins/openvswitch/ovs_quantum_plugin.ini
sudo sed -i 's/# Default: enable_tunneling = False/enable_tunneling = True/g' /etc/quantum/plugins/openvswitch/ovs_quantum_plugin.ini
sudo sed -i 's/# Example: tenant_network_type = gre/tenant_network_type = gre/g' /etc/quantum/plugins/openvswitch/ovs_quantum_plugin.ini
sudo sed -i 's/# Example: tunnel_id_ranges = 1:1000/tunnel_id_ranges = 1:1000/g' /etc/quantum/plugins/openvswitch/ovs_quantum_plugin.ini
sudo sed -i "s/# Default: local_ip =/local_ip = $PRIVATE_IP/g" /etc/quantum/plugins/openvswitch/ovs_quantum_plugin.ini
sudo sed -i "s/# firewall_driver/firewall_driver/g" /etc/quantum/plugins/openvswitch/ovs_quantum_plugin.ini

# Configure the quantum service to use keystone
sudo sed -i 's/# rabbit_host = localhost/rabbit_host = $CONT_PRIVATE_IP/g' /etc/quantum/quantum.conf
sudo sed -i 's/# auth_strategy = keystone/auth_strategy = keystone/g' /etc/quantum/quantum.conf
sudo sed -i "s/auth_host = 127.0.0.1/auth_host = $CONT_PRIVATE_IP/g" /etc/quantum/quantum.conf
sudo sed -i 's/%SERVICE_TENANT_NAME%/Services/g' /etc/quantum/quantum.conf
sudo sed -i 's/%SERVICE_USER%/quantum/g' /etc/quantum/quantum.conf
sudo sed -i 's/%SERVICE_PASSWORD%/quantumpw/g' /etc/quantum/quantum.conf

# Start Open vSwitch
sudo service openvswitch-switch restart

# Create the integration bridge
sudo ovs-vsctl add-br br-int

# Restart the quantum service agent
sudo service quantum-plugin-openvswitch-agent restart

# Use the 'admin' credentials
source ~/credentials/admin


nova hypervisor-list






# Use the 'user' credentials
source ~/credentials/user

# List images
nova image-list

# List flavors
nova flavor-list

# Boot an instance using flavor and image names (if names are unique)
nova boot --image cirros-qcow2 --flavor m1.tiny LabFirstInstance

# Boot an instance using flavor and image IDs
nova boot --image $IMAGE_ID_2 --flavor 1 LabSecondInstance

# List instances, notice status of instance
nova list

# Show details of instance
nova show LabFirstInstance

# View console log of instance
nova console-log LabFirstInstance

# Get network namespace (ie, qdhcp-5ab46e23-118a-4cad-9ca8-51d56a5b6b8c)
sudo ip netns
NETNS_ID=qdhcp-$PRIVATE_NET_ID

# Ping first instance after status is active
sudo ip netns exec $NETNS_ID ping -c 3 10.10.20.3

# Log into first instance ( username is 'cirros', password is 'cubswin:)' )
sudo ip netns exec $NETNS_ID ssh cirros@10.10.20.3

# If you get a 'REMOTE HOST IDENTIFICATION HAS CHANGED' warning from previous command
sudo ssh-keygen -f "/root/.ssh/known_hosts" -R 10.10.20.3

# Ping second instance from first instance
ping -c 3 10.10.20.4

# Log into second instance from first instance ( username is 'cirros', password is 'cubswin:)' )
ssh cirros@10.10.20.4

# Log out of second instance
exit

# Log out of first instance
exit

# Use virsh to talk directly to libvirt
sudo virsh list --all

# Delete instances
nova delete LabFirstInstance
nova delete LabSecondInstance

# List instances, notice status of instance
nova list

cat >> ~/.bashrc <<EOF
export NETNS_ID=$NETNS_ID
EOF


